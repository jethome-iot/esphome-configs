name: JetHub Configs CI

on:
  workflow_dispatch:
  push:
    paths:
      - 'JXD/**'
      - 'configlist.yml'
      - '.github/workflows/ci.yaml'
  pull_request:
    paths:
      - 'JXD/**'
      - 'configlist.yml'
  release:
    types: [published]

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: ‚§µÔ∏è Check out code
        uses: actions/checkout@v4

      - name: üî® Setup Python for matrix generation
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: üî® Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.45.1/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: üîÄ Generate matrix from configlist.yml
        id: set-matrix
        run: |
          matrix=$(yq eval -o=json '{"include": .configs}' configlist.yaml)
          echo "Generated matrix: $matrix"
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$matrix" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build:
    needs: generate-matrix
    runs-on: ubuntu-latest
    name: Check CI - ${{ matrix.device }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: ‚§µÔ∏è Check out code
        uses: actions/checkout@v4

      - name: üî® Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: üî® Install dependencies
        run: pip install esphome PyYAML

      - name: üöÄ Compile ESPHome config for ${{ matrix.device }}
        id: compile
        shell: bash
        run: |
          mkdir -p build_output
          echo "Compiling ${{ matrix.file }} for device ${{ matrix.device }}"
          esphome compile "${{ matrix.file }}" || { echo "Error compiling ${{ matrix.file }}"; exit 1; }
          find .
          filedir=$(echo "${{ matrix.device }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')

          firmware_path=$(find . -type f -path "*/${filedir}/firmware.factory.bin" -print -quit)
          if [ -n "$firmware_path" ]; then
            echo "Found firmware at: $firmware_path"
            cp "$firmware_path" "build_output/${filedir}.bin"
          else
            echo "::error::Firmware file not found in any */${normalized_name}/ directory"
            exit 1
          fi

      - name:  ‚§¥Ô∏è Upload Build Artifact
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.device }}
          path: build_output/**

      - name:  ‚§¥Ô∏èüéâ Publish Release Assets
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name }}
          files: build_output/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
