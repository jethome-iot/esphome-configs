# JXD-DISPLAY rev 1.0
pca9554:
  - id: jxd_display_exp
    pin_count: 16
    address: 0x24

binary_sensor:
# joystick and buttons
  - platform: gpio
    name: "UP"
    pin:
      pca9554: jxd_display_exp
      number: 8
      mode:
        input: true
      inverted: false
    on_click:
      - min_length: 50ms
        max_length: 350ms
        then:
          - display_menu.up:
  - platform: gpio
    name: "DOWN"
    pin:
      pca9554: jxd_display_exp
      number: 9
      mode:
        input: true
      inverted: false
    on_press:
      - display_menu.down:

  - platform: gpio
    name: "LEFT"
    pin:
      pca9554: jxd_display_exp
      number: 10
      mode:
        input: true
      inverted: false
    on_press:
      then:
        - display_menu.left:

  - platform: gpio
    name: "RIGHT"
    pin:
      pca9554: jxd_display_exp
      number: 11
      mode:
        input: true
      inverted: false
    on_press:
      then:
        - display_menu.right:

  - platform: gpio
    name: "CENTER"
    pin:
      pca9554: jxd_display_exp
      number: 12
      mode:
        input: true
      inverted: false
    on_press:
      then:
        - display_menu.enter:

  - platform: gpio
    name: "ESC"
    pin:
      pca9554: jxd_display_exp
      number: 13
      mode:
        input: true
      inverted: false
    on_press:
      then:
        - display_menu.show_main:

  - platform: gpio
    name: "ENT"
    pin:
      pca9554: jxd_display_exp
      number: 14
      mode:
        input: true
      inverted: false
    on_press:
      then:
        - display_menu.enter:
# joystick and buttons

font:
  - file:
      type: gfonts
      family: Roboto
      weight: 300
    id: font1
    size: 12

display:
  - platform: ssd1306_i2c
    id: display1
  # - platform: ssh1106
    # model: "SSD1306 128x64"
    model: "SH1106_128X64"
    address: 0x3C
    lambda: |-
      const auto width = it.get_width();
      const auto height = it.get_height();

      if (id(display_menu).is_active()) {
        it.menu(0, 0, id(display_menu), width, height);
      } else {
        it.print(0, 0, id(font1), "Menu is hidden, other drawing would go here here");
      }

graphical_display_menu:
  id: display_menu
  font: font1
  display: display1
  on_redraw:
    then:
      component.update: display1
  active: true
  mode: joystick
  items:

    - type: menu
      text: 'Switch'
      id: switch_submenu
      on_enter:
        then:
      items:
        - type: switch
          immediate_edit: true
          text: 'Relay 1'
          switch: relay_1

        - type: switch
          immediate_edit: true
          text: 'Relay 2'
          switch: relay_2

        - type: switch
          immediate_edit: true
          text: 'Relay 3'
          switch: relay_3

        - type: switch
          immediate_edit: true
          text: 'Relay 4'
          switch: relay_4

        - type: switch
          immediate_edit: true
          text: 'Relay 5'
          switch: relay_5

        - type: switch
          immediate_edit: true
          text: 'Relay 6'
          switch: relay_6

        - type: back
          text: "Back"

    - type: menu
      text: 'Network'
      items:
        - type: menu
          text: 'Info'
          id: info_submenu
          items:
            - type: label
              text: !lambda |-
                std::string res;
                if (id(ethernet_switch).state) {
                  res = id(ip_eth).state;
                }
                else if (id(wifi_switch).state) {
                  res = id(ip_wifi).state;
                }
                return std::string("IP: ") + res;
            - type: label
              text: !lambda |-
                std::string res;
                if (id(ethernet_switch).state) {
                  res = id(mac_eth).state;
                }
                else if (id(wifi_switch).state) {
                  res = id(mac_wifi).state;
                }

                return std::string("MC: ") + res;

            - type: back
              text: "Back"

        - type: menu
          text: 'Connection type'
          on_enter:
            - lambda: |-
                auto call = id(network_select_id).make_call();
                if (id(wifi_switch).state) {
                  call.set_index(0);
                }
                else if (id(ethernet_switch).state) {
                  call.set_index(1);
                }
                call.perform();
          items:
            - type: select
              select: network_select_id

            - type: command
              text: "Apply"
              on_value:
                - script.execute: setup_network_type

            - type: back
              text: "Back"

        - type: menu
          text: 'Reset wifi creds'
          items:
            - type: command
              text: "Reset?"
              on_value:
                - script.execute: reset_wifi

            - type: back
              text: "Back"

